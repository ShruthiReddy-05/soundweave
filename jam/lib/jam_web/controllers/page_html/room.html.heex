<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>soundWEave - Live Jamming</title>
    <style>
        :root {
            --teal-50: #f0fdfa;
            --teal-100: #ccfbf1;
            --teal-200: #99f6e4;
            --teal-300: #5eead4;
            --teal-400: #2dd4bf;
            --teal-500: #14b8a6;
            --teal-600: #0d9488;
            --teal-700: #0f766e;
            --teal-800: #115e59;
            --teal-900: #134e4a;
        }

        body {
            margin: 0;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background-color: var(--teal-50);
            min-height: 100vh;
            color: var(--teal-900);
        }

        .header {
            background: linear-gradient(135deg, var(--teal-600), var(--teal-700));
            color: white;
            padding: 1.5rem;
            text-align: center;
            font-size: 2rem;
            font-weight: 700;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .main-wrapper {
            display: flex;
            gap: 2rem;
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 2rem;
            min-height: calc(100vh - 150px);
        }

        .container {
            background: white;
            border-radius: 1rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            position: relative;
            overflow: hidden;
            flex: 1;
            min-width: 0; /* Prevents flex items from overflowing */
            max-width: 50%;
        }

        .container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--teal-400), var(--teal-500));
        }

        .video-container {
            aspect-ratio: 16/9;
            background-color: var(--teal-900);
            border-radius: 0.75rem;
            overflow: hidden;
            margin-bottom: 1.5rem;
        }

        #local-video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .button-container {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        button {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 0.5rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 1rem;
        }

        .primary-button {
            background-color: var(--teal-600);
            color: white;
        }

        .primary-button:hover {
            background-color: var(--teal-700);
        }

        .secondary-button {
            background-color: var(--teal-100);
            color: var(--teal-800);
        }

        .secondary-button:hover {
            background-color: var(--teal-200);
        }

        .control-button {
            width: 3rem;
            height: 3rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
            padding: 0;
        }

        .recording-controls {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }

        .off {
            background-color: #ef4444;
            color: white;
        }

        .off:hover {
            background-color: #dc2626;
        }

        .track-list {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
            max-height: 400px;
            overflow-y: auto;
            padding-right: 0.5rem;
        }

        .track-list::-webkit-scrollbar {
            width: 6px;
        }

        .track-list::-webkit-scrollbar-track {
            background: var(--teal-50);
            border-radius: 3px;
        }

        .track-list::-webkit-scrollbar-thumb {
            background: var(--teal-300);
            border-radius: 3px;
        }

        .track {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem;
            background-color: var(--teal-50);
            border-radius: 0.5rem;
            transition: all 0.2s ease;
        }

        .track:hover {
            background-color: var(--teal-100);
        }

        .track-name {
            font-weight: 500;
            color: var(--teal-800);
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            margin-right: 1rem;
        }

        .upload-section {
            margin-bottom: 1.5rem;
        }

        input[type="file"] {
            width: 100%;
            padding: 0.75rem;
            background-color: var(--teal-50);
            border-radius: 0.5rem;
            border: 2px dashed var(--teal-300);
            margin-bottom: 1rem;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--teal-800);
            margin-bottom: 1rem;
        }

        #recorded-player {
            width: 100%;
            margin-top: 1rem;
        }

        .mix-button {
            width: 100%;
            margin-top: 1.5rem;
            background: linear-gradient(135deg, var(--teal-500), var(--teal-600));
            color: white;
            padding: 1rem;
            font-size: 1.125rem;
        }

        .mix-button:hover {
            background: linear-gradient(135deg, var(--teal-600), var(--teal-700));
        }

        @media (max-width: 1024px) {
            .main-wrapper {
                flex-direction: column;
                padding: 1rem;
            }
            
            .container {
                max-width: 100%;
            }
        }
    </style>
</head>
<body>
    <!-- Rest of the HTML remains the same -->
    <div class="header">soundWEave - Live Jamming</div>

    <div class="main-wrapper">
        <div class="container">
            <div class="section-title">Live Session</div>
            <div class="video-container">
                <video id="local-video" autoplay muted playsinline></video>
            </div>

            <div class="button-container">
                <button id="toggle-button" class="control-button secondary-button">ðŸŽ¥</button>
                <button id="audio-toggle-button" class="control-button secondary-button">ðŸŽ™</button>
            </div>

            <div class="recording-controls">
                <button id="start-recording-button" class="primary-button">Start Recording</button>
                <button id="stop-recording-button" class="primary-button off">Stop Recording</button>
            </div>

            <audio id="recorded-player" controls>
                <source id="recorded-source" type="audio/webm">
                Your browser does not support the audio element.
            </audio>
        </div>

        <div class="container">
            <div class="section-title">Track Manager</div>
            <div class="upload-section">
                <input type="file" id="audio-upload" accept="audio/*" multiple>
                <button class="primary-button" onclick="uploadTracks()">Upload Tracks</button>
            </div>
            <div class="track-list" id="track-list">
                <!-- Tracks will be added here dynamically -->
            </div>
            <button class="mix-button" onclick="mixTracks()">Mix Tracks</button>
        </div>
    </div>

    <!-- JavaScript remains the same -->
    <script>
        // Previous JavaScript code remains exactly the same
        let mediaStream = null;
        let isCameraOn = true;
        let isAudioOn = true;
        let mediaRecorder = null;
        let recordedChunks = [];
        let audioElements = [];

        const userVideoElement = document.getElementById("local-video");
        const toggleButton = document.getElementById("toggle-button");
        const audioToggleButton = document.getElementById("audio-toggle-button");
        const trackListElement = document.getElementById("track-list");
        const startRecordingButton = document.getElementById("start-recording-button");
        const stopRecordingButton = document.getElementById("stop-recording-button");
        const recordedPlayer = document.getElementById("recorded-player");
        const recordedSource = document.getElementById("recorded-source");

        function requestMediaPermissions() {
            navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                .then(stream => {
                    mediaStream = stream;
                    userVideoElement.srcObject = stream;
                    startRecordingButton.disabled = false;
                })
                .catch(err => {
                    console.error("Error accessing user media:", err);
                });
        }

        toggleButton.addEventListener("click", () => {
            if (mediaStream) {
                isCameraOn = !isCameraOn;
                mediaStream.getVideoTracks()[0].enabled = isCameraOn;
                toggleButton.innerHTML = isCameraOn ? "ðŸŽ¥" : "ðŸš«";
            }
        });

        audioToggleButton.addEventListener("click", () => {
            if (mediaStream) {
                isAudioOn = !isAudioOn;
                mediaStream.getAudioTracks()[0].enabled = isAudioOn;
                audioToggleButton.innerHTML = isAudioOn ? "ðŸŽ™" : "ðŸ”‡";
            }
        });

        startRecordingButton.addEventListener("click", () => {
            recordedChunks = [];
            mediaRecorder = new MediaRecorder(mediaStream);
            mediaRecorder.ondataavailable = event => recordedChunks.push(event.data);
            mediaRecorder.onstop = () => {
                const audioBlob = new Blob(recordedChunks, { type: "audio/mp3" });
                const audioUrl = URL.createObjectURL(audioBlob);
                recordedSource.src = audioUrl;
                recordedPlayer.style.display = "block";
                recordedPlayer.load();
                startRecordingButton.disabled = false;
            };
            mediaRecorder.start();
            startRecordingButton.disabled = true;
            stopRecordingButton.classList.remove("off");
        });

        stopRecordingButton.addEventListener("click", () => {
            mediaRecorder.stop();
            startRecordingButton.disabled = false;
            stopRecordingButton.classList.add("off");
        });

        function uploadTracks() {
            const files = document.getElementById("audio-upload").files;
            if (files.length > 0) {
                Array.from(files).forEach((file, index) => {
                    const trackDiv = document.createElement("div");
                    trackDiv.classList.add("track");
                    trackDiv.innerHTML = `
                        <span class="track-name">${file.name}</span>
                        <button class="secondary-button" onclick="playTrack(${index})">Play</button>
                    `;
                    trackListElement.appendChild(trackDiv);
                    const audioElement = new Audio(URL.createObjectURL(file));
                    audioElement.setAttribute("data-index", index);
                    audioElements.push(audioElement);
                });
            }
        }

        function playTrack(index) {
            const audioElement = audioElements[index];
            const button = trackListElement.getElementsByClassName("secondary-button")[index];
            if (audioElement.paused) {
                button.innerHTML = "Stop";
                audioElement.play();
            } else {
                button.innerHTML = "Play";
                audioElement.pause();
            }
        }

        function mixTracks() {
            if (audioElements.length < 2) {
                alert("Please upload at least two tracks to mix.");
                return;
            }

            audioElements.forEach(audioEl => {
                audioEl.currentTime = 0;
                audioEl.play();
            });
        }

        window.onload = requestMediaPermissions;
    </script>
</body>
</html>