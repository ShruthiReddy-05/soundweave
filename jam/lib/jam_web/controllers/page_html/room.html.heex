<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Jamming App - Room</title>
    <style>
        body {
            margin: 0;
            font-family: 'Arial', sans-serif;
            background-color: #f7f9fb;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
        }

        /* Header */
        .header {
            background-color: #4CAF50;
            color: white;
            width: 100%;
            padding: 15px;
            text-align: center;
            font-size: 28px;
            font-weight: bold;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            margin-bottom: 30px;
        }

        /* Main Content Layout */
        .main-wrapper {
            display: flex;
            justify-content: center;
            gap: 40px;
            width: 100%;
            max-width: 1200px;
        }

        /* Left Section (Video/Recording) */
        .left-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            max-width: 500px;
        }

        .video-container {
            width: 100%;
            height: 300px;
            background-color: #000;
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 20px;
        }

        #local-video {
            width: 100%;
            height: 100%;
        }

        .button-container {
            display: flex;
            gap: 15px;
            margin-top: 15px;
        }

        .button-container button {
            padding: 12px 20px;
            font-size: 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .button-container button:hover {
            background-color: #45a049;
        }

        .off {
            background-color: #f44336;
        }

        /* Right Section (Track List and Upload) */
        .right-container {
            flex: 1;
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            max-width: 500px;
        }

        h2 {
            font-size: 22px;
            margin-bottom: 15px;
        }

        .upload-section {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            margin-bottom: 20px;
        }

        .upload-section input[type="file"] {
            margin-bottom: 10px;
        }

        .track-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .track {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            margin-bottom: 15px;
            background-color: #fafafa;
            border-radius: 8px;
            border: 1px solid #ddd;
            transition: background-color 0.3s ease;
        }

        .track:hover {
            background-color: #f0f0f0;
        }

        .track-name {
            font-size: 16px;
            color: #333;
        }

        .play-button {
            padding: 8px 16px;
            font-size: 14px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .play-button:hover {
            background-color: #45a049;
        }

        /* Recording Section */
        .recording-controls {
            margin-top: 30px;
            text-align: center;
        }

        #recorded-player {
            width: 100%;
            display: none;
            margin-top: 20px;
        }

        .upload-button {
            background-color: #2196F3;
            font-size: 16px;
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            border: none;
            cursor: pointer;
        }

        .upload-button:hover {
            background-color: #1976D2;
        }

    </style>
</head>
<body>

    <div class="header">soundWEave - Live Jamming</div>

    <!-- Main Content -->
    <div class="main-wrapper">
        <!-- Left Section (Video/Recording) -->
        <div class="left-container">
            <div class="video-container">
                <video id="local-video" autoplay muted playsinline></video>
            </div>

            <div class="button-container">
                <button id="toggle-button">🎥</button>
                <button id="audio-toggle-button">🎙</button>
            </div>

            <!-- Recording Controls -->
            <div class="recording-controls">
                <button id="start-recording-button" class="off">Start Recording</button>
                <button id="stop-recording-button" class="off">Stop Recording</button>
            </div>

            <!-- Recorded Audio Player -->
            <audio id="recorded-player" controls>
                <source id="recorded-source" type="audio/webm">
                Your browser does not support the audio element.
            </audio>
        </div>

        <!-- Right Section (Track List and Upload) -->
        <div class="right-container">
            <h2>Tracks</h2>
            <!-- Upload Section -->
            <div class="upload-section">
                <input type="file" id="audio-upload" accept="audio/*" multiple>
                <button class="upload-button" onclick="uploadTracks()">Upload Tracks</button>
            </div>

            <div class="track-list" id="track-list">
                <!-- Dynamically added tracks will go here -->
            </div>
        </div>
    </div>

    <script>
        let mediaStream = null;
        let isCameraOn = true;
        let isAudioOn = true;
        let mediaRecorder = null;
        let recordedChunks = [];
        let audio = new Audio();
        let currentTrackButton = null;

        const userVideoElement = document.getElementById("local-video");
        const errorMessageElement = document.getElementById("error-message");
        const toggleButton = document.getElementById("toggle-button");
        const audioToggleButton = document.getElementById("audio-toggle-button");
        const trackListElement = document.getElementById("track-list");
        const startRecordingButton = document.getElementById("start-recording-button");
        const stopRecordingButton = document.getElementById("stop-recording-button");
        const recordedPlayer = document.getElementById("recorded-player");
        const recordedSource = document.getElementById("recorded-source");

        // Request media permissions
        function requestMediaPermissions() {
            navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                .then(stream => {
                    mediaStream = stream;
                    userVideoElement.srcObject = stream;
                    startRecordingButton.disabled = false;
                })
                .catch(err => {
                    console.error("Error accessing user media:", err);
                    errorMessageElement.textContent = "Unable to access your camera and microphone. Please check your permissions.";
                });
        }

        // Toggle Camera
        toggleButton.addEventListener("click", () => {
            if (mediaStream) {
                const videoTrack = mediaStream.getVideoTracks()[0];
                videoTrack.enabled = !videoTrack.enabled;
                isCameraOn = videoTrack.enabled;
                toggleButton.innerHTML = isCameraOn ? "🎥" : "❌";
                toggleButton.classList.toggle("off", !isCameraOn);
            }
        });

        // Toggle Audio
        audioToggleButton.addEventListener("click", () => {
            if (mediaStream) {
                const audioTrack = mediaStream.getAudioTracks()[0];
                audioTrack.enabled = !audioTrack.enabled;
                isAudioOn = audioTrack.enabled;
                audioToggleButton.innerHTML = isAudioOn ? "🎙" : "🔇";
                audioToggleButton.classList.toggle("off", !isAudioOn);
            }
        });

        // Start recording audio
        startRecordingButton.addEventListener("click", () => {
            recordedChunks = [];
            mediaRecorder = new MediaRecorder(mediaStream);
            mediaRecorder.ondataavailable = event => recordedChunks.push(event.data);
            mediaRecorder.onstop = () => {
                const audioBlob = new Blob(recordedChunks, { type: "audio/webm" });
                const audioUrl = URL.createObjectURL(audioBlob);
                recordedSource.src = audioUrl;
                recordedPlayer.style.display = "block";
                recordedPlayer.load();
                startRecordingButton.disabled = false;
            };
            mediaRecorder.start();
            startRecordingButton.disabled = true;
            stopRecordingButton.classList.remove("off");
        });

        // Stop recording audio
        stopRecordingButton.addEventListener("click", () => {
            mediaRecorder.stop();
            startRecordingButton.disabled = false;
            stopRecordingButton.classList.add("off");
        });

        // Upload Tracks
        function uploadTracks() {
            const files = document.getElementById("audio-upload").files;
            for (let file of files) {
                const trackElement = document.createElement("div");
                trackElement.classList.add("track");
                trackElement.innerHTML = `
                    <span class="track-name">${file.name}</span>
                    <button class="play-button" onclick="togglePlayPause('${URL.createObjectURL(file)}', this)">Play</button>
                `;
                trackListElement.appendChild(trackElement);
            }
        }

        // Toggle Play/Pause for tracks
        function togglePlayPause(trackUrl, button) {
            if (audio.src !== trackUrl) {
                audio.src = trackUrl;
                audio.play();
                button.innerText = "Pause";
            } else {
                if (audio.paused) {
                    audio.play();
                    button.innerText = "Pause";
                } else {
                    audio.pause();
                    button.innerText = "Play";
                }
            }
        }

        // Initialize Media Permissions
        requestMediaPermissions();
    </script>

</body>
</html>
